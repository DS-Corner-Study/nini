useState
 가장 기본적인 Hook이며, 함수형 컴포넌트에서도 가변적인 상태를 지닐  수 있게 해줌
 코드 상단에서 import 구문을 통해 불러옴

useEffect
리액트 컴포넌트가 렌더링될 때마다 특정 작업을 수행하도록 설정할 수 있는 Hook

마운트될 때만 실행하고 싶을 때 두 번째 파라미터로 비어 있는 배열 넣어줄 것
useEffect(() => {
    console.log("마운트될 때만 실행");
}, []);

특정 값이 업데이트 될 때만 실행하고 싶으면 두 번째 파라미터로 전달되는 배열 안에 검사하고 싶은 값 넣어줄 것
useEffect(() => {
    console.log(name);
}, [name]);

컴포넌트가 언마운트되기 전이나 업데이트되기 직전에 어떠한 작업을 수행하고 싶다면 useEffect에서 뒷정리(cleanup) 함수를 반환

useReducer
 useState보다 더 다양한 컴포넌트 상황에 따라 다양한 상태를 다른 값으로 업데이트해 주고 싶을 때 사용하는 Hook

useMemo
함수형 컴포넌트 내부에서 발생하는 연산을 최적화 가능
렌더링하는 과정에서 특정 값이 바뀌었을 때만 연산을 실행하고, 원하는 값이 바뀌지 않았다면 이전에 연산했던 결과를 다시 사용하는 방식 

useCallback
주로 렌더링 성능을 최적화해야 하는 상황에서 사용
이벤트 핸들러 함수를 필요할 때만 생성할 수 있음

리액트 매뉴얼에서는 함수형 컴포넌트와 Hooks 사용을 권장
꼭 필요한 상황에서만 클래스형 컴포넌트 구현하도록