액션은 상태에 어떠한 변화가 필요하면 발생한다
{
  type: 'TOGGLE_VALUE'
}
액션 객체는 type 필드 반드시 가질 것

액션 생성 함수(액션 객체를 만들어주는 함수)
function addTodo(data) {
return {
    type: 'ADD_TODO',
    data
};
}
    
// 화살표 함수로도 만들 수 있습니다.
const changeInput = text => ({ 
    type: 'CHANGE_INPUT',
text
});

리듀서는 변화를 일으키는 함수
액션을 만들어서 발생시키면 리듀서가 현재 상태와 전달받은 액션 객체를 파라미터로 받아 옵니다. 그리고 두 값을 참고하여 새로운 상태를 만들어서 반환해줌

프로젝트에 리덕스를 적용하기 위해 만드는 스토어
한개의 프로젝트는 단 하나의 스토어만 가질 수 있음
스토어 안에는 현재 애플리케이션 상태와 리듀서가 들어가 있으며, 그 외에도 몇 가지 중요한 내장 함수를 지님

디스패치(dispatch)는 스토어의 내장 함수 중 하나..액션을 발생시키는 것 
함수는 dispatch(action)과 같은 형태로 액션 객체를 파라미터로 넣어서 호출
이 함수가 호출되면 스토어는 리듀서 함수를 실행시켜서 새로운 상태를 만들어줌

구독(subscribe)도 스토어의 내장 함수 중 하나로, subscribe 함수 안에 리스너 함수를 파라미터로 넣어서 호출해 주면, 이 리스너 함수가 액션이 디스패치되어 상태가 업데이트될 때마다 호출됨

리덕스는 리액트에 종속되는 라이브러리가 아님
리액트에서 사용하려고 만들어졌지만 실제로 다른 UI 라이브러리/프레임워크와 함께 사용할 수도 있음

리덕스의 세 가지 규칙
1. 단일 스토어
2. 읽기 전용 상태
상태를 업데이트할 때 기존의 객체는 건드리지 않고 새로운 객체를 생성해 줄 것
리덕스에서 불변성을 유지해야 하는 이유는 내부적으로 데이터가 변경되는 것을 감지하기 위해 얕은 비교(shallow equality) 검사를 하기 때문
객체의 변화를 감지할 때 객체의 깊숙한 안쪽까지 비교하는 것이 아니라 겉핥기 식으로 비교하여 좋은 성능을 유지할 수 있는 것
3. 리듀서는 순수한 함수
변화를 일으키는 리듀서 함수는 순수한 함수여야 함 순수한 함수는 다음 조건을 만족합니다.
• 리듀서 함수는 이전 상태와 액션 객체를 파라미터로 받습니다.

• 파라미터 외의 값에는 의존하면 안 됩니다.

• 이전 상태는 절대로 건드리지 않고, 변화를 준 새로운 상태 객체를 만들어서 반환합니다.

• 똑같은 파라미터로 호출된 리듀서 함수는 언제나 똑같은 결과 값을 반환해야 합니다.